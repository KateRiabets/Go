package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
type Equipment struct {
	ID               int     `json:"id"`
	Name             string  `json:"name"`
	Omega            float64 `json:"omega"`
	TB               float64 `json:"tB"`
	Mu               float64 `json:"mu"`
	TP               float64 `json:"tP"`
	RequiresLength   bool    `json:"requiresLength"`
	RequiresQuantity bool    `json:"requiresQuantity"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö—ñ–¥–Ω–æ–≥–æ JSON-–∑–∞–ø–∏—Ç—É
type RequestData struct {
	Equipment []struct {
		ID       int     `json:"id"`
		Length   float64 `json:"length,omitempty"`
		Quantity int     `json:"quantity,omitempty"`
	} `json:"equipment"`
	Lever int `json:"lever"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
type ResponseData struct {
	SingleOmega       float64 `json:"singleOmega"`
	SingleTB          float64 `json:"singleTB"`
	SingleKa          float64 `json:"singleKa"`
	SingleKp          float64 `json:"singleKp"`
	DoubleOmega       float64 `json:"doubleOmega"`
	DoubleOmegaWithSW float64 `json:"doubleOmegaWithSW"`
	Conclusion        string  `json:"conclusion"`
}

// –°–ø–∏—Å–æ–∫ —É—Å—å–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
var equipmentData = []Equipment{
	{1, "–ü–õ-110 –∫–í", 0.007, 10.0, 0.167, 35.0, true, false},
	{2, "–ü–õ-35 –∫–í", 0.02, 8.0, 0.167, 35.0, true, false},
	{3, "–ü–õ-10 –∫–í", 0.02, 10.0, 0.167, 35.0, true, false},
	{4, "–ö–õ-10 –∫–í (—Ç—Ä–∞–Ω—à–µ—è)", 0.03, 44.0, 1.0, 9.0, true, false},
	{5, "–ö–õ-10 –∫–í (–∫–∞–±–µ–ª—å–Ω–∏–π –∫–∞–Ω–∞–ª)", 0.005, 17.5, 1.0, 9.0, true, false},
	{6, "–ó–±—ñ—Ä–Ω—ñ —à–∏–Ω–∏ 10 –∫–í", 0.03, 2.0, 0.167, 5.0, false, true},
	{7, "–¢-110 –∫–í", 0.015, 100.0, 1.0, 43.0, false, false},
	{8, "–¢-35 –∫–í", 0.02, 80.0, 1.0, 28.0, false, false},
	{9, "–¢-10 –∫–í (–∫–∞–±–µ–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞)", 0.005, 60.0, 0.5, 10.0, false, false},
	{10, "–¢-10 –∫–í (–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ –º–µ—Ä–µ–∂–∞)", 0.05, 60.0, 0.5, 10.0, false, false},
	{11, "–í-110 –∫–í (–µ–ª–µ–≥–∞–∑–æ–≤–∏–π)", 0.01, 30.0, 0.1, 30.0, false, false},  // –ü–µ—Ä–µ–º–∏–∫–∞—á
	{12, "–í-10 –∫–í (–º–∞–ª–æ–æ–ª–∏–≤–Ω–∏–π)", 0.02, 15.0, 0.33, 15.0, false, false}, // –ü–µ—Ä–µ–º–∏–∫–∞—á
	{13, "–í-10 –∫–í (–≤–∞–∫—É—É–º–Ω–∏–π)", 0.01, 15.0, 0.33, 15.0, false, false},   // –ü–µ—Ä–µ–º–∏–∫–∞—á
	{14, "–ê–í-0,38 –∫–í", 0.05, 4.0, 0.33, 10.0, false, false},
	{15, "–ï–î 6-10 –∫–í", 0.1, 160.0, 0.5, 0.0, false, false},
	{16, "–ï–î 0,38 –∫–í", 0.1, 50.0, 0.5, 0.0, false, false},
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –∑–∞ ID
func getEquipmentByID(id int) *Equipment {
	for _, eq := range equipmentData {
		if eq.ID == id {
			return &eq
		}
	}
	return nil
}

func calculateReliability(w http.ResponseWriter, r *http.Request) {
	// –ß–∏—Ç–∞–Ω–Ω—è JSON –∑ –∑–∞–ø–∏—Ç—É
	requestData, err := parseJSONRequest(w, r)
	if err != nil {
		return
	}

	// –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –æ–¥–Ω–æ–∫–æ–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
	singleOmega, singleTB, singleKa, singleKp := calculateSingleCircle(requestData)

	// –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–≤–æ–∫–æ–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
	doubleOmega, doubleOmegaWithSW := calculateDoubleCircle(singleOmega, singleKa, singleKp, requestData.Lever)

	// –í–∏—Å–Ω–æ–≤–æ–∫
	conclusion := determineConclusion(singleOmega, doubleOmegaWithSW)

	// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
	response := ResponseData{
		SingleOmega:       singleOmega,
		SingleTB:          singleTB,
		SingleKa:          singleKa,
		SingleKp:          singleKp,
		DoubleOmega:       doubleOmega,
		DoubleOmegaWithSW: doubleOmegaWithSW,
		Conclusion:        conclusion,
	}

	// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ JSON-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
	sendJSONResponse(w, response)
}

func parseJSONRequest(w http.ResponseWriter, r *http.Request) (RequestData, error) {
	var requestData RequestData

	body, err := io.ReadAll(r.Body)
	if err != nil {
		http.Error(w, "–ü–æ–º–∏–ª–∫–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É", http.StatusBadRequest)
		return requestData, err
	}

	err = json.Unmarshal(body, &requestData)
	if err != nil {
		http.Error(w, "–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON", http.StatusBadRequest)
		return requestData, err
	}

	return requestData, nil
}

func calculateSingleCircle(requestData RequestData) (float64, float64, float64, float64) {
	var singleOmega, singleTB, singleKa, singleKp float64
	// –ü—Ä–æ—Ö–æ–¥—ñ–¥ –ø–æ –≤—Å—ñ—Ö –æ–±—Ä–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –µ–ª–µ–º–µ–Ω—Ç–∞—Ö –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
	for _, item := range requestData.Equipment {
		eq := getEquipmentByID(item.ID) // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±'—î–∫—Ç—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –∑–∞ ID
		if eq != nil {
			length := item.Length     // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
			quantity := item.Quantity // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç–≤—ñ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)

			// –Ø–∫—â–æ –¥–ª—è —Ü—å–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –¥–æ–≤–∂–∏–Ω—É,  1
			if !eq.RequiresLength {
				length = 1
			}
			// –Ø–∫—â–æ –¥–ª—è —Ü—å–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å,  1
			if !eq.RequiresQuantity {
				quantity = 1
			}
			// –©–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –º–Ω–æ–∂–µ–Ω–Ω—è: –¥–æ–≤–∂–∏–Ω—É —á–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
			multiplier := length
			if eq.RequiresQuantity {
				multiplier = float64(quantity)
			}
			singleOmega += eq.Omega * multiplier
			singleTB += eq.TB * eq.Omega * multiplier
		}
	}
	// –Ø–∫—â–æ —á–∞—Å—Ç–æ—Ç–∞ –≤—ñ–¥–º–æ–≤ –Ω–µ –Ω—É–ª—å–æ–≤–∞, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
	if singleOmega > 0 {
		singleTB /= singleOmega
		singleKa = singleOmega * (singleTB / 8760)
		var maxTp float64 // –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è TP —Å–µ—Ä–µ–¥ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
		// –ü–æ—à—É–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –ø–ª–∞–Ω–æ–≤–æ–≥–æ —Ä–µ–º–æ–Ω—Ç—É —Å–µ—Ä–µ–¥ —É—Å—å–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
		for _, item := range requestData.Equipment {
			eq := getEquipmentByID(item.ID)
			if eq != nil && eq.TP > maxTp {
				maxTp = eq.TP
			}
		}
		singleKp = 1.2 * maxTp / 8760
	}
	return singleOmega, singleTB, singleKa, singleKp
}

func calculateDoubleCircle(singleOmega, singleKa, singleKp float64, leverID int) (float64, float64) {
	doubleOmega := 2 * singleOmega * (singleKa + singleKp)

	//–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–º–∏–∫–∞—á–∞
	var switchOmega float64
	if switchEquipment := getEquipmentByID(leverID); switchEquipment != nil {
		switchOmega = switchEquipment.Omega
	}

	doubleOmegaWithSW := doubleOmega + switchOmega
	return doubleOmega, doubleOmegaWithSW
}

func determineConclusion(singleOmega, doubleOmegaWithSW float64) string {
	if singleOmega > doubleOmegaWithSW {
		return "–û–¥–Ω–æ–∫–æ–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –º–µ–Ω—à –Ω–∞–¥—ñ–π–Ω–∞, –Ω—ñ–∂ –¥–≤–æ–∫–æ–ª–æ–≤–∞."
	}
	return "–î–≤–æ–∫–æ–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –º–µ–Ω—à –Ω–∞–¥—ñ–π–Ω–∞, –Ω—ñ–∂ –æ–¥–Ω–æ–∫–æ–ª–æ–≤–∞."
}

func sendJSONResponse(w http.ResponseWriter, response ResponseData) {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func serveHTML(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "index.html")
}

func main() {
	http.HandleFunc("/", serveHTML)
	http.HandleFunc("/calculate", calculateReliability)

	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:8080")
	http.ListenAndServe(":8080", nil)
}
